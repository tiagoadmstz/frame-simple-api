/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.fs.api.frames.filtros;

import br.com.fs.api.beans.JTextFieldCBI;
import br.com.fs.api.interfaces.ListenerPatternAdapter;
import br.com.fs.api.interfaces.ManipulaFrames;
import java.awt.event.KeyEvent;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.util.Objects;
import javax.swing.JButton;

/**
 *
 * @author tiago.teixeira
 */
public final class SeletorDatas extends ManipulaFrames {

    private static final long serialVersionUID = -6473306764459348826L;
    private final DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private final ZoneId zone = ZoneOffset.systemDefault();
    private LocalDateTime dataInicial;
    private LocalDateTime dataFinal;

    /**
     * Creates new form SeletorDatas
     */
    public SeletorDatas() {
        setImageIcon();
        initComponents();
        comportamento();
    }

    public JButton getBtConfirmar() {
        return btConfirmar;
    }

    public void setBtConfirmar(JButton btConfirmar) {
        this.btConfirmar = btConfirmar;
    }

    private void getDatas() {
        dataInicial = LocalDateTime.of(LocalDate.parse(txtDataInicial.getText(), dtf), LocalTime.of(0, 0, 0));
        dataFinal = LocalDateTime.of(LocalDate.parse(txtDataFinal.getText(), dtf), LocalTime.of(0, 0, 0));
    }

    public boolean validarData() {
        try {
            getDatas();
            return dataInicial.isBefore(dataFinal) || dataInicial.isEqual(dataFinal);
        } catch (Exception e) {
            return false;
        }
    }

    public long[] getDatesTimeMillis() {
        getDatas();
        return new long[]{
            dataInicial.toInstant(zone.getRules().getOffset(dataInicial)).toEpochMilli(),
            dataFinal.toInstant(zone.getRules().getOffset(dataFinal)).toEpochMilli()
        };
    }

    public long getInitDateTimeMillis() {
        getDatas();
        return dataInicial.toInstant(zone.getRules().getOffset(dataInicial)).toEpochMilli();
    }

    public long getEndDateTimeMillis() {
        getDatas();
        return dataFinal.toInstant(zone.getRules().getOffset(dataFinal)).toEpochMilli();
    }

    private void comportamento() {
        ListenerPatternAdapter lca = new ListenerPatternAdapter<SeletorDatas>(this){
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    if (Objects.equals("di", e.getComponent().getAccessibleContext().getAccessibleName())) {
                        lbDataInicial.requestFocus();
                        txtDataInicial.requestFocus();
                    } else if (Objects.equals("df", e.getComponent().getAccessibleContext().getAccessibleName())) {
                        lbDataFinal.requestFocus();
                        txtDataFinal.requestFocus();
                    }
                }
            }
        };
        txtDataInicial.addFocusListener(lca);
        txtDataFinal.addFocusListener(lca);
        txtDataInicial.addKeyListener(lca);
        txtDataFinal.addKeyListener(lca);
        btConfirmar.addActionListener(lca);
    }
    
    public JTextFieldCBI getTxtDataFinal() {
        return txtDataFinal;
    }

    public void setTxtDataFinal(JTextFieldCBI txtDataFinal) {
        this.txtDataFinal = txtDataFinal;
    }

    public JTextFieldCBI getTxtDataInicial() {
        return txtDataInicial;
    }

    public void setTxtDataInicial(JTextFieldCBI txtDataInicial) {
        this.txtDataInicial = txtDataInicial;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbDataInicial = new javax.swing.JLabel();
        txtDataInicial = new br.com.fs.api.beans.JTextFieldCBI();
        lbDataFinal = new javax.swing.JLabel();
        txtDataFinal = new br.com.fs.api.beans.JTextFieldCBI();
        btConfirmar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Seletor de Datas");

        lbDataInicial.setText("Data Inicial:");

        txtDataInicial.setMaxLength(10);
        txtDataInicial.setName("data"); // NOI18N

        lbDataFinal.setText("Data Final:");

        txtDataFinal.setMaxLength(10);
        txtDataFinal.setName("data"); // NOI18N

        btConfirmar.setText("Confirmar");
        btConfirmar.setActionCommand("confirmar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDataInicial)
                            .addComponent(lbDataFinal))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDataFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtDataInicial, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btConfirmar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDataInicial)
                    .addComponent(txtDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbDataFinal)
                    .addComponent(txtDataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btConfirmar)
                .addContainerGap())
        );

        txtDataInicial.getAccessibleContext().setAccessibleName("di");
        txtDataFinal.getAccessibleContext().setAccessibleName("df");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SeletorDatas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SeletorDatas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SeletorDatas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SeletorDatas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SeletorDatas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConfirmar;
    private javax.swing.JLabel lbDataFinal;
    private javax.swing.JLabel lbDataInicial;
    private br.com.fs.api.beans.JTextFieldCBI txtDataFinal;
    private br.com.fs.api.beans.JTextFieldCBI txtDataInicial;
    // End of variables declaration//GEN-END:variables
}
